// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;

namespace wfa_liaison.Models;

public partial class LT_biblioContext : DbContext
{
    public LT_biblioContext()
    {
    }

    public LT_biblioContext(DbContextOptions<LT_biblioContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Auteur> Auteurs { get; set; }

    public virtual DbSet<Category> Categories { get; set; }

    public virtual DbSet<Livre> Livres { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    {
        #warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see https://go.microsoft.com/fwlink/?LinkId=723263.
        => optionsBuilder.UseSqlServer("Data Source=bd-tinfo;Initial Catalog=LT_biblio;Integrated Security=True;Encrypt=False").LogTo(Console.Write,LogLevel.Information);
        //optionsBuilder.UseLazyLoadingProxies();
    }


    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Auteur>(entity =>
        {
            entity.Property(e => e.IdAuteur).ValueGeneratedNever();
        });

        modelBuilder.Entity<Category>(entity =>
        {
            entity.Property(e => e.IdCategorie).ValueGeneratedNever();
        });

        modelBuilder.Entity<Livre>(entity =>
        {
            entity.Property(e => e.IdLivre).ValueGeneratedNever();

            entity.HasOne(d => d.IdCategorieNavigation).WithMany(p => p.Livres).HasConstraintName("FK_LIVRES_CATEGORIES");

            entity.HasMany(d => d.IdAuteurs).WithMany(p => p.IdLivres)
                .UsingEntity<Dictionary<string, object>>(
                    "LivresAuteur",
                    r => r.HasOne<Auteur>().WithMany()
                        .HasForeignKey("IdAuteur")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_LIVRES_AUTEURS_AUTEURS"),
                    l => l.HasOne<Livre>().WithMany()
                        .HasForeignKey("IdLivre")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_LIVRES_AUTEURS_LIVRES"),
                    j =>
                    {
                        j.HasKey("IdLivre", "IdAuteur");
                        j.ToTable("LIVRES_AUTEURS");
                        j.IndexerProperty<int>("IdLivre").HasColumnName("ID_LIVRE");
                        j.IndexerProperty<int>("IdAuteur").HasColumnName("ID_AUTEUR");
                    });
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}