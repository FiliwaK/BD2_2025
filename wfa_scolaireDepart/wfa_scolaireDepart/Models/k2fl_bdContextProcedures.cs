// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;
using wfa_scolaireDepart.Models;

namespace wfa_scolaireDepart.Models
{
    public partial class k2fl_bdContext
    {
        private Ik2fl_bdContextProcedures _procedures;

        public virtual Ik2fl_bdContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new k2fl_bdContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public Ik2fl_bdContextProcedures GetProcedures()
        {
            return Procedures;
        }
    }

    public partial class k2fl_bdContextProcedures : Ik2fl_bdContextProcedures
    {
        private readonly k2fl_bdContext _context;

        public k2fl_bdContextProcedures(k2fl_bdContext context)
        {
            _context = context;
        }

        public virtual async Task<List<ListerResultatEtudiantResult>> ListerResultatEtudiantAsync(string no_Da, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "no_Da",
                    Size = 14,
                    Value = no_Da ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<ListerResultatEtudiantResult>("EXEC @returnValue = [dbo].[ListerResultatEtudiant] @no_Da = @no_Da", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<nombreCoursSessionResult>> nombreCoursSessionAsync(string session, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "session",
                    Size = 10,
                    Value = session ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<nombreCoursSessionResult>("EXEC @returnValue = [dbo].[nombreCoursSession] @session = @session", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> nombreCoursSessionOutputAsync(string session, OutputParameter<int?> nombreCours, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameternombreCours = new SqlParameter
            {
                ParameterName = "nombreCours",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = nombreCours?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "session",
                    Size = 10,
                    Value = session ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NChar,
                },
                parameternombreCours,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[nombreCoursSessionOutput] @session = @session, @nombreCours = @nombreCours OUTPUT", sqlParameters, cancellationToken);

            nombreCours?.SetValue(parameternombreCours.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
